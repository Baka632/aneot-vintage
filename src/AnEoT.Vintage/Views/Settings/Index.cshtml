@{
ViewData["Title"] = "设置";
}

<div>
    <h1>@ViewData["Title"]</h1>
    <div>
        <noscript>
            <span style="color: red">
                <strong>JavaScript 不可用，因此对设置进行的任何修改将不起作用。</strong>
            </span>
            <br />
            <br />
        </noscript>
        <div>
            <span>页面颜色主题:</span>
            <select id="themeSelect" title="页面颜色主题">
                <option value="null">自动选择</option>
                <option value="light">亮色</option>
                <option value="dark">暗色</option>
            </select>
        </div>
        <br />
        <div>
            <input title="选择是否让页面居中布局" id="layoutCheckbox" type="checkbox" />
            <label for="layoutCheckbox">页面居中布局</label>
        </div>
        <br />
        <div>
            <button id="enable-notification-button" type="button">启用更新通知推送</button>
            <button id="disable-notification-button" type="button">取消更新通知推送</button>
        </div>
    </div>
</div>

<script>
    var themeSelect = document.getElementById("themeSelect");
    var layoutCheckbox = document.getElementById("layoutCheckbox");
    var enableNotificationButton = document.getElementById("enable-notification-button");
    var disableNotificationButton = document.getElementById("disable-notification-button");
    setThemeSelect(themeSelect);
    setLayoutCheckbox(layoutCheckbox);
    determineNotificationButtonVisiblity(enableNotificationButton, disableNotificationButton);

    function modifyEnableNotificationButtonVisiblity(enableButtonVisible, enableButton, disableButton)
    {
        if (enableButtonVisible)
        {
            enableButton.style.display = "block";
            disableButton.style.display = "none";
        }
        else
        {
            disableButton.style.display = "block";
            enableButton.style.display = "none";
        }
    }

    async function determineNotificationButtonVisiblity(enableBtn, disableBtn) {
        // 基本 API 检查
        let basicRequirement = "Notification" in window && 'serviceWorker' in navigator;

        if (!basicRequirement) {
            disableBtn.style.display = enableBtn.style.display = "none";
            return;
        }

        let result = (await navigator.serviceWorker.ready).periodicSync ? true : false;

        if (!result) {
            disableBtn.style.display = enableBtn.style.display = "none";
            return;
        }

        enableBtn.addEventListener("click", async function () {
            await requestForNotification(enableBtn, disableBtn);
        });
        disableBtn.addEventListener("click", async function () {
            await unregisterForNotification(enableBtn, disableBtn);
        });

        // 权限检查
        const notifGranted = Notification.permission === "granted";
        const periodicStatus = await navigator.permissions.query({ name: 'periodic-background-sync' });

        if (notifGranted && periodicStatus.state === "granted") {
            const registration = await navigator.serviceWorker.ready;
            const tags = await registration.periodicSync.getTags();

            if (tags.includes("fetch-aneot-latest-volume")) {
                modifyEnableNotificationButtonVisiblity(false, enableBtn, disableBtn);
                return;
            }
        }

        modifyEnableNotificationButtonVisiblity(true, enableBtn, disableBtn);
    }

    async function unregisterForNotification(enableBtn, disableBtn)
    {
        const registration = await navigator.serviceWorker.ready;
        registration.periodicSync.unregister("fetch-aneot-latest-volume");
        alert("完成");
        modifyEnableNotificationButtonVisiblity(true, enableBtn, disableBtn);
    }

    async function requestForNotification(enableBtn, disableBtn) {
        alert("接下来您可能需要允许我们使用一些权限，这样才能启用更新通知推送功能。");

        let notifGranted = Notification.permission === "granted";

        if (!notifGranted) {
            notifGranted = await Notification.requestPermission() === "granted";
            if (!notifGranted) {
                alert("您需要同意通知权限");
                return;
            }
        }

        let periodicSyncGranted = (await navigator.permissions.query({ name: 'periodic-background-sync' })).state === "granted";
        const registration = await navigator.serviceWorker.ready;
        const tags = await registration.periodicSync.getTags();

        if (!periodicSyncGranted || !tags.includes("fetch-aneot-latest-volume")) {
            try {
                await registration.periodicSync.register('fetch-aneot-latest-volume', {
                    minInterval: 43200000 // 十二小时
                });

                periodicSyncGranted = (await navigator.permissions.query({ name: 'periodic-background-sync' })).state === "granted";

                if (!periodicSyncGranted) {
                    alert("您需要同意定期同步权限");
                    return;
                }
            }
            catch (err) {
                alert(`出现问题，未注册定期同步任务，请尝试安装本站点的 PWA 应用：${err}`);
                return;
            }
        }

        alert("成功！");
        modifyEnableNotificationButtonVisiblity(false, enableBtn, disableBtn);
    }

    function setThemeSelect(select) {
        var preDefTheme = docCookies.getItem("pageTheme");
        if (preDefTheme != null && (preDefTheme == "light" || preDefTheme == "dark")) {
            selectDefaultThemeSelectOption(select, preDefTheme);
        }
        else {
            selectDefaultThemeSelectOption(select, "null");
        }

        if (select.addEventListener) {
            select.addEventListener("change", function () {
                switchTheme(select.value)
            });
        }
        else if (select.attachEvent) {
            select.attachEvent('onchange', function () {
                switchTheme(select.value)
            });
        }
    }

    function selectDefaultThemeSelectOption(select, targetValue) {
        for (var i = 0; i < select.options.length; i++) {
            var single = select.options[i];
            if (single.value == targetValue) {
                single.selected = true;
                break;
            }
        }
    }

    function setLayoutCheckbox(checkbox) {
        var preDefLayout = docCookies.getItem("pageLayout");
        if (preDefLayout == "center") {
            checkbox.checked = true;
        }

        if (checkbox.addEventListener) {
            // 侦听 change 而不是 input 的原因是：
            // IE 和老版本 Edge 存在 input 控件状态改变时不会激发 input 事件的 bug
            checkbox.addEventListener("change", function () {
                setLayoutByCheckboxValue(checkbox.checked);
            });
        }
        else if (checkbox.attachEvent) {
            if ('onpropertychange' in checkbox) {
                checkbox.attachEvent('onpropertychange', function () {
                    setLayoutByCheckboxValue(checkbox.checked);
                });
            }
            else {
                checkbox.attachEvent('onchange', function () {
                    setLayoutByCheckboxValue(checkbox.checked);
                });
            }
        }
    }

    function setLayoutByCheckboxValue(isChecked) {
        if (isChecked) {
            switchLayout("center")
        }
        else {
            switchLayout("left")
        }
    }
</script>